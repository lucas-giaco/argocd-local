ingress-nginx:
  controller:
    name: controller
    image:
      registry: k8s.gcr.io
      image: ingress-nginx/controller
      # for backwards compatibility consider setting the full image url via the repository value below
      # use *either* current default registry/image or repository format or installing chart by providing the values.yaml will fail
      # repository:
      tag: "v1.0.5"
      digest: sha256:55a1fcda5b7657c372515fe402c3e39ad93aa59f6e4378e82acd99912fe6028d
      pullPolicy: IfNotPresent
      # www-data -> uid 101
      runAsUser: 101
      allowPrivilegeEscalation: true

    # Use an existing PSP instead of creating one
    existingPsp: ""

    # Configures the controller container name
    containerName: controller

    # Configures the ports the nginx-controller listens on
    containerPort:
      http: 80
      https: 443

    # Process Ingress objects without ingressClass annotation/ingressClassName field
    # Overrides value for --watch-ingress-without-class flag of the controller binary
    # Defaults to false
    watchIngressWithoutClass: false

    # Process IngressClass per name (additionally as per spec.controller)
    ingressClassByName: false

    # This configuration defines if Ingress Controller should allow users to set
    # their own *-snippet annotations, otherwise this is forbidden / dropped
    # when users add those annotations.
    # Global snippets in ConfigMap are still respected
    allowSnippetAnnotations: true

    ## Use host ports 80 and 443
    ## Disabled by default
    ##
    hostPort:
      enabled: true
      ports:
        http: 80
        https: 443

    ## Election ID to use for status update
    ##
    electionID: ingress-controller-leader

    # This section refers to the creation of the IngressClass resource
    # IngressClass resources are supported since k8s >= 1.18 and required since k8s >= 1.19
    ingressClassResource:
      name: nginx
      enabled: true
      default: true
      controllerValue: "k8s.io/ingress-nginx"

      # Parameters is a link to a custom resource containing additional
      # configuration for the controller. This is optional if the controller
      # does not require extra parameters.
      parameters: {}

    # labels to add to the pod container metadata
    podLabels: {}
    #  key: value

    ## Security Context policies for controller pods
    ##
    podSecurityContext: {}

    ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for
    ## notes on enabling and using sysctls
    ###
    sysctls: {}
    # sysctls:
    #   "net.core.somaxconn": "8192"

    ## Allows customization of the source of the IP address or FQDN to report
    ## in the ingress status field. By default, it reads the information provided
    ## by the service. If disable, the status field reports the IP address of the
    ## node or nodes where an ingress controller pod is running.
    publishService:
      enabled: false
      ## Allows overriding of the publish service to bind to
      ## Must be <namespace>/<service_name>
      ##
      pathOverride: ""

    ## Limit the scope of the controller
    ##
    scope:
      enabled: false
      namespace: ""   # defaults to $(POD_NAMESPACE)
      # When scope.enabled == false, instead of watching all namespaces, we watching namespaces whose labels
      #   only match with namespaceSelector. Format like foo=bar. Defaults to empty, means watching all namespaces.
      namespaceSelector: ""

    ## Allows customization of the configmap / nginx-configmap namespace
    ##
    configMapNamespace: ""   # defaults to $(POD_NAMESPACE)

    ## Allows customization of the tcp-services-configmap
    ##
    tcp:
      configMapNamespace: ""   # defaults to $(POD_NAMESPACE)
      ## Annotations to be added to the tcp config configmap
      annotations: {}

    ## Allows customization of the udp-services-configmap
    ##
    udp:
      configMapNamespace: ""   # defaults to $(POD_NAMESPACE)
      ## Annotations to be added to the udp config configmap
      annotations: {}

    # Maxmind license key to download GeoLite2 Databases
    # https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases
    maxmindLicenseKey: ""

    ## Additional command line arguments to pass to nginx-ingress-controller
    ## E.g. to specify the default SSL certificate you can use
    ## extraArgs:
    ##   default-ssl-certificate: "<namespace>/<secret_name>"
    extraArgs:
      enable-ssl-passthrough: ""
      publish-status-address: "localhost"

    ## Additional environment variables to set
    extraEnvs: []
    # extraEnvs:
    #   - name: FOO
    #     valueFrom:
    #       secretKeyRef:
    #         key: FOO
    #         name: secret-resource

    ## DaemonSet or Deployment
    ##
    kind: Deployment

    ## Node tolerations for server scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Equal"
      effect: "NoSchedule"

    ## Node labels for controller pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector:
      kubernetes.io/os: linux
      ingress-ready: 'true'

    ## Liveness and readiness probe values
    ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ##
    # startupProbe:
    #   httpGet:
    #     # should match container.healthCheckPath
    #     path: "/healthz"
    #     port: 10254
    #     scheme: HTTP
    #   initialDelaySeconds: 5
    #   periodSeconds: 5
    #   timeoutSeconds: 2
    #   successThreshold: 1
    #   failureThreshold: 5
    livenessProbe:
      httpGet:
        # should match container.healthCheckPath
        path: "/healthz"
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      httpGet:
        # should match container.healthCheckPath
        path: "/healthz"
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3


    # Path of the health check endpoint. All requests received on the port defined by
    # the healthz-port parameter are forwarded internally to this path.
    healthCheckPath: "/healthz"

    # Address to bind the health check endpoint.
    # It is better to set this option to the internal node address
    # if the ingress nginx controller is running in the hostNetwork: true mode.
    healthCheckHost: ""

    replicaCount: 1

    minAvailable: 1

    # Define requests resources to avoid probe issues due to CPU utilization in busy nodes
    # ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903
    # Ideally, there should be no limits.
    # https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/
    resources:
    #  limits:
    #    cpu: 100m
    #    memory: 90Mi
      requests:
        cpu: 100m
        memory: 90Mi

    # Mutually exclusive with keda autoscaling
    autoscaling:
      enabled: false

    # Mutually exclusive with hpa autoscaling
    keda:
      enabled: false

    ## Enable mimalloc as a drop-in replacement for malloc.
    ## ref: https://github.com/microsoft/mimalloc
    ##
    enableMimalloc: true

    service:
      enabled: true

      annotations: {}
      labels: {}
      # clusterIP: ""

      ## List of IP addresses at which the controller services are available
      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
      ##
      externalIPs: []

      # loadBalancerIP: ""
      loadBalancerSourceRanges: []

      enableHttp: true
      enableHttps: true

      ## Set external traffic policy to: "Local" to preserve source IP on providers supporting it.
      ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
      # externalTrafficPolicy: ""

      ## Must be either "None" or "ClientIP" if set. Kubernetes will default to "None".
      ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      # sessionAffinity: ""

      ## Specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,
      ## the service controller allocates a port from your cluster’s NodePort range.
      ## Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      # healthCheckNodePort: 0

      ## Represents the dual-stack-ness requested or required by this Service. Possible values are
      ## SingleStack, PreferDualStack or RequireDualStack.
      ## The ipFamilies and clusterIPs fields depend on the value of this field.
      ## Ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/
      ipFamilyPolicy: "SingleStack"

      ## List of IP families (e.g. IPv4, IPv6) assigned to the service. This field is usually assigned automatically
      ## based on cluster configuration and the ipFamilyPolicy field.
      ## Ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/
      ipFamilies:
        - IPv4

      ports:
        http: 80
        https: 443

      targetPorts:
        http: http
        https: https

      # type: LoadBalancer

      type: NodePort
      # nodePorts:
      #   http: ""
      #   https: ""
      #   tcp: {}
      #   udp: {}

      external:
        enabled: true

      ## Enables an additional internal load balancer (besides the external one).
      ## Annotations are mandatory for the load balancer to come up. Varies with the cloud service.
      internal:
        enabled: false
        annotations: {}

        # loadBalancerIP: ""

        ## Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.
        loadBalancerSourceRanges: []

        ## Set external traffic policy to: "Local" to preserve source IP on
        ## providers supporting it
        ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
        # externalTrafficPolicy: ""

    extraContainers: []
    ## Additional containers to be added to the controller pod.
    ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
    #  - name: my-sidecar
    #    image: nginx:latest
    #  - name: lemonldap-ng-controller
    #    image: lemonldapng/lemonldap-ng-controller:0.2.0
    #    args:
    #      - /lemonldap-ng-controller
    #      - --alsologtostderr
    #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration
    #    env:
    #      - name: POD_NAME
    #        valueFrom:
    #          fieldRef:
    #            fieldPath: metadata.name
    #      - name: POD_NAMESPACE
    #        valueFrom:
    #          fieldRef:
    #            fieldPath: metadata.namespace
    #    volumeMounts:
    #    - name: copy-portal-skins
    #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins

    extraVolumeMounts: []
    ## Additional volumeMounts to the controller main container.
    #  - name: copy-portal-skins
    #   mountPath: /var/lib/lemonldap-ng/portal/skins

    extraVolumes: []
    ## Additional volumes to the controller pod.
    #  - name: copy-portal-skins
    #    emptyDir: {}

    extraInitContainers: []
    ## Containers, which are run before the app containers are started.
    # - name: init-myservice
    #   image: busybox
    #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']

    admissionWebhooks:
      annotations: {}
      enabled: true
      failurePolicy: Fail
      # timeoutSeconds: 10
      port: 8443
      certificate: "/usr/local/certificates/cert"
      key: "/usr/local/certificates/key"
      namespaceSelector: {}
      objectSelector: {}
      ## Labels to be added to admission webhooks
      labels: {}

      # Use an existing PSP instead of creating one
      existingPsp: ""

      service:
        annotations: {}
        # clusterIP: ""
        externalIPs: []
        # loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 443
        type: ClusterIP

      createSecretJob:
        resources: {}
          # limits:
          #   cpu: 10m
          #   memory: 20Mi
          # requests:
          #   cpu: 10m
          #   memory: 20Mi

      patchWebhookJob:
        resources: {}

      patch:
        enabled: true
        image:
          registry: k8s.gcr.io
          image: ingress-nginx/kube-webhook-certgen
          # for backwards compatibility consider setting the full image url via the repository value below
          # use *either* current default registry/image or repository format or installing chart by providing the values.yaml will fail
          # repository:
          tag: v1.1.1
          digest: sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
          pullPolicy: IfNotPresent
        ## Provide a priority class name to the webhook patching job
        ##
        priorityClassName: ""
        podAnnotations: {}
        nodeSelector:
          kubernetes.io/os: linux
        tolerations: []
        ## Labels to be added to patch job resources
        labels: {}
        runAsUser: 2000

    metrics:
      enabled: false

    ## Improve connection draining when ingress controller pod is deleted using a lifecycle hook:
    ## With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds
    ## to 300, allowing the draining of connections up to five minutes.
    ## If the active connections end before that, the pod will terminate gracefully at that time.
    ## To effectively take advantage of this feature, the Configmap feature
    ## worker-shutdown-timeout new value is 240s instead of 10s.
    ##
    lifecycle:
      preStop:
        exec:
          command:
            - /wait-shutdown

    priorityClassName: system-cluster-critical

  ## Rollback limit
  ##
  revisionHistoryLimit: 10

  ## Default 404 backend
  ##
  defaultBackend:
    enabled: false

  ## Enable RBAC as per https://github.com/kubernetes/ingress-nginx/blob/main/docs/deploy/rbac.md and https://github.com/kubernetes/ingress-nginx/issues/266
  rbac:
    create: true
    scope: false

  # If true, create & use Pod Security Policy resources
  # https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  podSecurityPolicy:
    enabled: false

  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
